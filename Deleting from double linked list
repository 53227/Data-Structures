#include <iostream>

using namespace std;

// Node structure
struct Node {
    int data;
    Node* prev;
    Node* next;
    
    Node(int d) : data(d), prev(nullptr), next(nullptr) {}
};

// Doubly linked list class
class DoublyLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}

    // Function to insert at the end (for testing purposes)
    void insertAtEnd(int data) {
        Node* newNode = new Node(data);
        if (tail == nullptr) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    // Function to delete from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;
        head = head->next;

        if (head != nullptr) {
            head->prev = nullptr;
        } else {
            tail = nullptr;
        }

        delete temp;
    }

    // Function to delete from the end
    void deleteFromEnd() {
        if (tail == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = tail;
        tail = tail->prev;

        if (tail != nullptr) {
            tail->next = nullptr;
        } else {
            head = nullptr;
        }

        delete temp;
    }

    // Function to delete from a specific position
    void deleteFromPosition(int position) {
        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        Node* temp = head;

        if (position == 1) {
            deleteFromBeginning();
            return;
        }

        for (int i = 1; temp != nullptr && i < position; ++i) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of bounds!" << endl;
            return;
        }

        if (temp->next != nullptr) {
            temp->next->prev = temp->prev;
        } else {
            tail = temp->prev;
        }

        if (temp->prev != nullptr) {
            temp->prev->next = temp->next;
        }

        delete temp;
    }

    // Function to display the list
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    DoublyLinkedList dll;

    dll.insertAtEnd(10);
    dll.insertAtEnd(20);
    dll.insertAtEnd(30);

    cout << "List after inserting elements: ";
    dll.display();

    dll.deleteFromBeginning();
    cout << "List after deleting from beginning: ";
    dll.display();

    dll.deleteFromEnd();
    cout << "List after deleting from end: ";
    dll.display();

    dll.insertAtEnd(40);
    dll.insertAtEnd(50);
    cout << "List after inserting more elements: ";
    dll.display();

    dll.deleteFromPosition(2);
    cout << "List after deleting from position 2: ";
    dll.display();

    dll.deleteFromPosition(5); // Invalid position

    return 0;
}
