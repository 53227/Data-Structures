#include <iostream>

using namespace std;

// Define the structure of a node
struct Node {
    int data;
    Node* next;
    
    // Constructor to initialize a node
    Node(int val) : data(val), next(nullptr) {}
};

// Function to insert a new node at the beginning of the linked list
void insertAtBeginning(Node*& head, int val) {
    Node* newNode = new Node(val);
    newNode->next = head;
    head = newNode;
}

// Function to delete the first occurrence of a node with a given value from the linked list
void deleteNode(Node*& head, int val) {
    if (head == nullptr) {
        cout << "Empty list. Nothing to delete." << endl;
        return;
    }
    
    // Handle deletion if the node to be deleted is the head node
    if (head->data == val) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }
    
    Node* prev = nullptr;
    Node* curr = head;
    
    // Traverse the list to find the node to delete
    while (curr != nullptr && curr->data != val) {
        prev = curr;
        curr = curr->next;
    }
    
    // If the node with value `val` is found, delete it
    if (curr != nullptr) {
        prev->next = curr->next;
        delete curr;
    } else {
        cout << "Node with value " << val << " not found in the list." << endl;
    }
}

// Function to display the elements of the linked list
void display(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

// Function to delete the entire linked list to avoid memory leaks
void deleteLinkedList(Node*& head) {
    Node* curr = head;
    while (curr != nullptr) {
        Node* next = curr->next;
        delete curr;
        curr = next;
    }
    head = nullptr;
}

int main() {
    Node* head = nullptr;

    // Inserting elements into the linked list
    insertAtBeginning(head, 5);
    insertAtBeginning(head, 10);
    insertAtBeginning(head, 15);
    insertAtBeginning(head, 20);

    // Displaying elements of the linked list
    cout << "Linked list elements before deletion: ";
    display(head);

    // Deleting elements from the linked list
    deleteNode(head, 10); // Delete node with value 10
    deleteNode(head, 20); // Delete node with value 20

    // Displaying elements of the linked list after deletion
    cout << "Linked list elements after deletion: ";
    display(head);

    // Deleting the entire linked list
    deleteLinkedList(head);

    return 0;
}
