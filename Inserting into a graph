#include <iostream>
#include <vector>
#include <list>

using namespace std;

// Graph class
class Graph {
private:
    int V; // Number of vertices
    vector<list<int>> adjList; // Adjacency list

public:
    // Constructor
    Graph(int vertices) : V(vertices), adjList(vertices) {}

    // Function to add an edge
    void addEdge(int src, int dest) {
        adjList[src].push_back(dest); // Add edge from src to dest
        adjList[dest].push_back(src); // Add edge from dest to src for undirected graph
    }

    // Function to display the graph
    void display() {
        for (int i = 0; i < V; ++i) {
            cout << "Vertex " << i << ":";
            for (auto x : adjList[i]) {
                cout << " -> " << x;
            }
            cout << endl;
        }
    }
};

int main() {
    // Create a graph with 5 vertices
    Graph g(5);

    // Add edges
    g.addEdge(0, 1);
    g.addEdge(0, 4);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // Display the graph
    cout << "Graph representation (Adjacency List):" << endl;
    g.display();

    return 0;
}
