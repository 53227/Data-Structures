#include <iostream>

using namespace std;

// Node structure
struct Node {
    int data;
    Node* left;
    Node* right;
    
    Node(int d) : data(d), left(nullptr), right(nullptr) {}
};

// Binary Search Tree class
class BinaryTree {
private:
    Node* root;

    // Helper function to insert a new node
    Node* insert(Node* node, int data) {
        if (node == nullptr) {
            return new Node(data);
        }

        if (data < node->data) {
            node->left = insert(node->left, data);
        } else if (data > node->data) {
            node->right = insert(node->right, data);
        }

        return node;
    }

    // Helper function to find the minimum value node
    Node* findMin(Node* node) {
        while (node && node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    // Helper function to delete a node
    Node* deleteNode(Node* root, int data) {
        if (root == nullptr) {
            return root;
        }

        if (data < root->data) {
            root->left = deleteNode(root->left, data);
        } else if (data > root->data) {
            root->right = deleteNode(root->right, data);
        } else {
            // Node with only one child or no child
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            Node* temp = findMin(root->right);

            // Copy the inorder successor's content to this node
            root->data = temp->data;

            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->data);
        }
        return root;
    }

    // Helper function to display the tree (in-order traversal)
    void inorder(Node* node) {
        if (node == nullptr) {
            return;
        }

        inorder(node->left);
        cout << node->data << " ";
        inorder(node->right);
    }

public:
    BinaryTree() : root(nullptr) {}

    // Function to insert a new node
    void insert(int data) {
        root = insert(root, data);
    }

    // Function to delete a node
    void deleteNode(int data) {
        root = deleteNode(root, data);
    }

    // Function to display the tree
    void display() {
        inorder(root);
        cout << endl;
    }
};

int main() {
    BinaryTree tree;

    tree.insert(50);
    tree.insert(30);
    tree.insert(20);
    tree.insert(40);
    tree.insert(70);
    tree.insert(60);
    tree.insert(80);

    cout << "In-order traversal of the tree: ";
    tree.display();

    tree.deleteNode(20);
    cout << "In-order traversal after deleting 20: ";
    tree.display();

    tree.deleteNode(30);
    cout << "In-order traversal after deleting 30: ";
    tree.display();

    tree.deleteNode(50);
    cout << "In-order traversal after deleting 50: ";
    tree.display();

    return 0;
}
